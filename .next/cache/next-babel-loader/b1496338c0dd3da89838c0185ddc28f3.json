{"ast":null,"code":"var _jsxFileName = \"/home/jorge-n/Documentos/workspace-react/saco_de_vacilos/frontend/src/pages/Register/index.tsx\";\nvar __jsx = React.createElement;\nimport { Button, FormControl } from \"@chakra-ui/core\";\nimport React, { useEffect } from \"react\";\nimport { Form, Formik } from \"formik\";\nimport Toast from \"./../../components/Toast\";\nimport HomeLayout from \"../../components/HomeLayout\";\nimport { FormInput } from \"../../components/Form/FormInput\";\nimport { useMutation } from \"urql\"; // import logo from \"./../assets/image/logo.png\";\n\nconst REGISTER_MUTATION = `mutation Register(\n    options: { $password: String!, $username: String! }\n    $email: String,\n    $name: String) {\n  register(\n    options: { password: $password, username: $username }\n    email: $email\n    name: $name\n  ) {\n    errors {\n      field\n      message\n    }\n    user {\n      id\n      username\n      email\n      updatedAt\n      createdAt\n    }\n  }\n}\n`;\n\nconst Register = ({}) => {\n  const [] = useMutation(REGISTER_MUTATION);\n  useEffect(() => {\n    document.title = \"Login\";\n  }, []);\n\n  async function handleSubmit(event) {\n    event.preventDefault(); //Verificar se todos o campos estão preenchidos antes da primeira requisição.\n\n    if (!username || !password) {\n      Toast(\"Que vacilo! Você não preencheu todos os campos.\", \"warning\");\n      return false;\n    } //Bloquear o botão de login para evitar requisições desnecessárias.\n\n\n    let btn_login = document.getElementById(\"btn_login\");\n    btn_login.setAttribute(\"disabled\", \"disabled\");\n    btn_login.classList.add(\"waiting\"); //Tentar realizar a requisição.\n\n    try {\n      const response = await api.post(\"/users/login\", {\n        username,\n        password\n      });\n      const {\n        data\n      } = response;\n      console.log(data);\n      data.login_date = new Date();\n      dispatch(UserActions.login(JSON.stringify(data))); //TODO, método de redirecionamento vannila não fica legal :(\n\n      window.location = \"/Dashboard\";\n    } catch (error) {\n      Toast(\"Vacilou na senha ou usuario, verifique se suas credenciais estão corretas..\", \"warning\");\n      btn_login.classList.remove(\"waiting\");\n      btn_login.removeAttribute(\"disabled\");\n    }\n  }\n\n  return __jsx(HomeLayout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 5\n    }\n  }, __jsx(Formik, {\n    initialValues: {\n      username: \"\",\n      password: \"\",\n      email: \"\"\n    },\n    onSubmit: values => {\n      console.log(values);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }\n  }, ({\n    isSubmitting\n  }) => __jsx(Form, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 11\n    }\n  }, __jsx(FormControl, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }\n  }, __jsx(FormInput, {\n    name: \"email\",\n    placeholder: \"E-mail\",\n    label: \"E-mail\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 15\n    }\n  }), __jsx(FormInput, {\n    name: \"username\",\n    placeholder: \"Nome de Usu\\xE1rio\",\n    label: \"Nome de Usu\\xE1rio\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 15\n    }\n  }), __jsx(FormInput, {\n    name: \"password\",\n    placeholder: \"Senha\",\n    label: \"Senha\",\n    type: \"password\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 15\n    }\n  })), __jsx(Button, {\n    type: \"submit\",\n    isLoading: isSubmitting,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 13\n    }\n  }, \"Cadastrar\"))));\n};\n\nexport default Register;","map":{"version":3,"sources":["/home/jorge-n/Documentos/workspace-react/saco_de_vacilos/frontend/src/pages/Register/index.tsx"],"names":["Button","FormControl","React","useEffect","Form","Formik","Toast","HomeLayout","FormInput","useMutation","REGISTER_MUTATION","Register","document","title","handleSubmit","event","preventDefault","username","password","btn_login","getElementById","setAttribute","classList","add","response","api","post","data","console","log","login_date","Date","dispatch","UserActions","login","JSON","stringify","window","location","error","remove","removeAttribute","email","values","isSubmitting"],"mappings":"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","sourcesContent":["import {\n  Button,\n  FormControl,\n  FormErrorMessage,\n  FormLabel,\n  Input,\n} from \"@chakra-ui/core\";\nimport React, { useEffect, useState } from \"react\";\nimport { Form, Formik } from \"formik\";\n\nimport Toast from \"./../../components/Toast\";\nimport HomeLayout from \"../../components/HomeLayout\";\nimport { FormInput } from \"../../components/Form/FormInput\";\nimport { useMutation } from \"urql\";\n\n// import logo from \"./../assets/image/logo.png\";\n\ninterface RegisterProps {}\n\nconst REGISTER_MUTATION = `mutation Register(\n    options: { $password: String!, $username: String! }\n    $email: String,\n    $name: String) {\n  register(\n    options: { password: $password, username: $username }\n    email: $email\n    name: $name\n  ) {\n    errors {\n      field\n      message\n    }\n    user {\n      id\n      username\n      email\n      updatedAt\n      createdAt\n    }\n  }\n}\n`;\n\nconst Register: React.FC<RegisterProps> = ({}) => {\n  const [] = useMutation(REGISTER_MUTATION);\n\n  useEffect(() => {\n    document.title = \"Login\";\n  }, []);\n\n  async function handleSubmit(event) {\n    event.preventDefault();\n    //Verificar se todos o campos estão preenchidos antes da primeira requisição.\n    if (!username || !password) {\n      Toast(\"Que vacilo! Você não preencheu todos os campos.\", \"warning\");\n      return false;\n    }\n\n    //Bloquear o botão de login para evitar requisições desnecessárias.\n    let btn_login = document.getElementById(\"btn_login\");\n    btn_login.setAttribute(\"disabled\", \"disabled\");\n    btn_login.classList.add(\"waiting\");\n\n    //Tentar realizar a requisição.\n    try {\n      const response = await api.post(\"/users/login\", { username, password });\n\n      const { data } = response;\n\n      console.log(data);\n      data.login_date = new Date();\n\n      dispatch(UserActions.login(JSON.stringify(data)));\n\n      //TODO, método de redirecionamento vannila não fica legal :(\n      window.location = \"/Dashboard\";\n    } catch (error) {\n      Toast(\n        \"Vacilou na senha ou usuario, verifique se suas credenciais estão corretas..\",\n        \"warning\"\n      );\n\n      btn_login.classList.remove(\"waiting\");\n      btn_login.removeAttribute(\"disabled\");\n    }\n  }\n\n  return (\n    <HomeLayout>\n      <Formik\n        initialValues={{ username: \"\", password: \"\", email: \"\" }}\n        onSubmit={(values) => {\n          console.log(values);\n        }}\n      >\n        {({ isSubmitting }) => (\n          <Form>\n            <FormControl>\n              <FormInput name=\"email\" placeholder=\"E-mail\" label=\"E-mail\" />\n              <FormInput\n                name=\"username\"\n                placeholder=\"Nome de Usuário\"\n                label=\"Nome de Usuário\"\n              />\n              <FormInput\n                name=\"password\"\n                placeholder=\"Senha\"\n                label=\"Senha\"\n                type=\"password\"\n              />\n            </FormControl>\n\n            <Button type=\"submit\" isLoading={isSubmitting}>\n              Cadastrar\n            </Button>\n          </Form>\n        )}\n      </Formik>\n    </HomeLayout>\n  );\n};\n\nexport default Register;\n"]},"metadata":{},"sourceType":"module"}
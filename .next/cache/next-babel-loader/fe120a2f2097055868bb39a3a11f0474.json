{"ast":null,"code":"import gql from 'graphql-tag';\nimport * as Urql from 'urql';\nexport const RegisterDocument = gql`\n    mutation Register($password: String!, $username: String!, $email: String!, $name: String!) {\n  register(options: {password: $password, username: $username}, email: $email, name: $name) {\n    errors {\n      field\n      message\n    }\n    user {\n      id\n      username\n      email\n      updatedAt\n      createdAt\n    }\n  }\n}\n    `;\nexport function useRegisterMutation() {\n  return Urql.useMutation(RegisterDocument);\n}\n;","map":{"version":3,"sources":["/home/jorge-n/Documentos/workspace-react/saco_de_vacilos/frontend/src/generated/graphql.tsx"],"names":["gql","Urql","RegisterDocument","useRegisterMutation","useMutation"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,aAAhB;AACA,OAAO,KAAKC,IAAZ,MAAsB,MAAtB;AAkRA,OAAO,MAAMC,gBAAgB,GAAGF,GAAI;;;;;;;;;;;;;;;;KAA7B;AAkBP,OAAO,SAASG,mBAAT,GAA+B;AACpC,SAAOF,IAAI,CAACG,WAAL,CAA8DF,gBAA9D,CAAP;AACD;AAAA","sourcesContent":["import gql from 'graphql-tag';\nimport * as Urql from 'urql';\nexport type Maybe<T> = T | null;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n  /** The javascript `Date` as string. Type represents date and time as the ISO Date string. */\n  DateTime: any;\n};\n\nexport type Query = {\n  __typename?: 'Query';\n  hello: Scalars['String'];\n  me?: Maybe<User>;\n  users: Array<User>;\n  user?: Maybe<User>;\n  indexfollowingrelationship: Array<FollowingRelationship>;\n  following?: Maybe<FollowingRelationship>;\n  followers?: Maybe<Array<FollowingRelationship>>;\n  posts: Array<Post>;\n  post?: Maybe<Post>;\n  postsByAuthor: Array<Post>;\n  postUserActions: Array<PostUserAction>;\n  postUserAction?: Maybe<PostUserAction>;\n  userActionByPost: Array<PostUserAction>;\n  usersProfile: Array<UserSettings>;\n  userProfile?: Maybe<UserSettings>;\n};\n\n\nexport type QueryUserArgs = {\n  identifier: Scalars['Int'];\n};\n\n\nexport type QueryFollowingArgs = {\n  user: Scalars['Int'];\n};\n\n\nexport type QueryFollowersArgs = {\n  user: Scalars['Int'];\n};\n\n\nexport type QueryPostArgs = {\n  identifier: Scalars['Int'];\n};\n\n\nexport type QueryPostsByAuthorArgs = {\n  authot: Scalars['Float'];\n};\n\n\nexport type QueryPostUserActionArgs = {\n  identifier: Scalars['Int'];\n};\n\n\nexport type QueryUserActionByPostArgs = {\n  post: Scalars['Float'];\n};\n\n\nexport type QueryUserProfileArgs = {\n  identifier: Scalars['Int'];\n};\n\nexport type User = {\n  __typename?: 'User';\n  id: Scalars['String'];\n  username: Scalars['String'];\n  name: Scalars['String'];\n  email: Scalars['String'];\n  active: Scalars['Boolean'];\n  createdAt: Scalars['DateTime'];\n  updatedAt: Scalars['DateTime'];\n};\n\n\nexport type FollowingRelationship = {\n  __typename?: 'FollowingRelationship';\n  id: Scalars['String'];\n  user: User;\n  following: User;\n  createdAt: Scalars['DateTime'];\n  updatedAt: Scalars['DateTime'];\n};\n\nexport type Post = {\n  __typename?: 'Post';\n  id: Scalars['String'];\n  content: Scalars['String'];\n  initial_balance: Scalars['Float'];\n  deserved_count: Scalars['Float'];\n  undeserved_count: Scalars['Float'];\n  view_count: Scalars['Float'];\n  status: Scalars['String'];\n  createdAt: Scalars['DateTime'];\n  updatedAt: Scalars['DateTime'];\n  author: User;\n  guilty: User;\n};\n\nexport type PostUserAction = {\n  __typename?: 'PostUserAction';\n  id: Scalars['String'];\n  post: Post;\n  author: User;\n  action: Scalars['String'];\n  createdAt: Scalars['DateTime'];\n  updatedAt: Scalars['DateTime'];\n};\n\nexport type UserSettings = {\n  __typename?: 'UserSettings';\n  id: Scalars['String'];\n  notification_comments: Scalars['Boolean'];\n  notification_follower: Scalars['Boolean'];\n  notification_mentions: Scalars['Boolean'];\n  createdAt: Scalars['DateTime'];\n  updatedAt: Scalars['DateTime'];\n  user: User;\n};\n\nexport type Mutation = {\n  __typename?: 'Mutation';\n  register: UserResponse;\n  login: UserResponse;\n  updateUser?: Maybe<User>;\n  deleteUser: Scalars['Boolean'];\n  follow: FollowingRelationship;\n  unfollow: Scalars['Boolean'];\n  createPost: Post;\n  updatePost?: Maybe<Post>;\n  deletePost: Scalars['Boolean'];\n  createUserAction: PostUserAction;\n  deleteUserAction: Scalars['Boolean'];\n  createUserSettings: UserSettings;\n  updateUserSettings?: Maybe<UserSettings>;\n};\n\n\nexport type MutationRegisterArgs = {\n  options: UsernamePasswordInput;\n  email: Scalars['String'];\n  name: Scalars['String'];\n};\n\n\nexport type MutationLoginArgs = {\n  options: UsernamePasswordInput;\n};\n\n\nexport type MutationUpdateUserArgs = {\n  password?: Maybe<Scalars['String']>;\n  email?: Maybe<Scalars['String']>;\n  name?: Maybe<Scalars['String']>;\n  username?: Maybe<Scalars['String']>;\n  id: Scalars['Float'];\n};\n\n\nexport type MutationDeleteUserArgs = {\n  id: Scalars['Float'];\n};\n\n\nexport type MutationFollowArgs = {\n  follow: Scalars['Float'];\n  user: Scalars['Float'];\n};\n\n\nexport type MutationUnfollowArgs = {\n  following: Scalars['Float'];\n  user: Scalars['Float'];\n};\n\n\nexport type MutationCreatePostArgs = {\n  initial_balance: Scalars['Float'];\n  content: Scalars['String'];\n  guilty: Scalars['Float'];\n  author: Scalars['Float'];\n};\n\n\nexport type MutationUpdatePostArgs = {\n  undeserved_count: Scalars['Float'];\n  deserve_count: Scalars['Float'];\n  content: Scalars['String'];\n  identifier: Scalars['Float'];\n};\n\n\nexport type MutationDeletePostArgs = {\n  identifier: Scalars['Float'];\n};\n\n\nexport type MutationCreateUserActionArgs = {\n  action: Scalars['String'];\n  post: Scalars['Float'];\n  author: Scalars['Float'];\n};\n\n\nexport type MutationDeleteUserActionArgs = {\n  identifier: Scalars['Float'];\n};\n\n\nexport type MutationCreateUserSettingsArgs = {\n  notification_mentions: Scalars['Boolean'];\n  notification_follower: Scalars['Boolean'];\n  notification_comments: Scalars['Boolean'];\n};\n\n\nexport type MutationUpdateUserSettingsArgs = {\n  notification_mentions?: Maybe<Scalars['Boolean']>;\n  notification_follower?: Maybe<Scalars['Boolean']>;\n  notification_comments?: Maybe<Scalars['Boolean']>;\n  user_id: Scalars['Float'];\n};\n\nexport type UserResponse = {\n  __typename?: 'UserResponse';\n  errors?: Maybe<Array<FieldError>>;\n  user?: Maybe<User>;\n};\n\nexport type FieldError = {\n  __typename?: 'FieldError';\n  field: Scalars['String'];\n  message: Scalars['String'];\n};\n\nexport type UsernamePasswordInput = {\n  username: Scalars['String'];\n  password: Scalars['String'];\n};\n\nexport type RegisterMutationVariables = Exact<{\n  password: Scalars['String'];\n  username: Scalars['String'];\n  email: Scalars['String'];\n  name: Scalars['String'];\n}>;\n\n\nexport type RegisterMutation = (\n  { __typename?: 'Mutation' }\n  & { register: (\n    { __typename?: 'UserResponse' }\n    & { errors?: Maybe<Array<(\n      { __typename?: 'FieldError' }\n      & Pick<FieldError, 'field' | 'message'>\n    )>>, user?: Maybe<(\n      { __typename?: 'User' }\n      & Pick<User, 'id' | 'username' | 'email' | 'updatedAt' | 'createdAt'>\n    )> }\n  ) }\n);\n\n\nexport const RegisterDocument = gql`\n    mutation Register($password: String!, $username: String!, $email: String!, $name: String!) {\n  register(options: {password: $password, username: $username}, email: $email, name: $name) {\n    errors {\n      field\n      message\n    }\n    user {\n      id\n      username\n      email\n      updatedAt\n      createdAt\n    }\n  }\n}\n    `;\n\nexport function useRegisterMutation() {\n  return Urql.useMutation<RegisterMutation, RegisterMutationVariables>(RegisterDocument);\n};"]},"metadata":{},"sourceType":"module"}